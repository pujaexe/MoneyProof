// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4znbjXig9wF3fZoi7i7zbU
// Component: _XwAzx55qV
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_aum_reserve.module.css"; // plasmic-import: 4znbjXig9wF3fZoi7i7zbU/projectcss
import sty from "./PlasmicAgregateCard.module.css"; // plasmic-import: _XwAzx55qV/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: BAj1wpRDeS/icon

export type PlasmicAgregateCard__VariantMembers = {};
export type PlasmicAgregateCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicAgregateCard__VariantsArgs;
export const PlasmicAgregateCard__VariantProps = new Array<VariantPropType>();

export type PlasmicAgregateCard__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicAgregateCard__ArgsType;
export const PlasmicAgregateCard__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2"
);

export type PlasmicAgregateCard__OverridesType = {
  agregateCard?: p.Flex<"div">;
  h4?: p.Flex<"h4">;
};

export interface DefaultAgregateCardProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAgregateCard__RenderFunc(props: {
  variants: PlasmicAgregateCard__VariantsArgs;
  args: PlasmicAgregateCard__ArgsType;
  overrides: PlasmicAgregateCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"agregateCard"}
      data-plasmic-override={overrides.agregateCard}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.agregateCard
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <IconIcon
            className={classNames(projectcss.all, sty.svg__oLtEr)}
            role={"img"}
          />
        ),

        value: args.slot2
      })}
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__fvyuc)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ofDx)}>
            {p.renderPlasmicSlot({
              defaultContents: "Exchange Assets",
              value: args.children,
              className: classNames(sty.slotTargetChildren)
            })}
          </div>

          <h4
            data-plasmic-name={"h4"}
            data-plasmic-override={overrides.h4}
            className={classNames(projectcss.all, projectcss.h4, sty.h4)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "$5.000.000",
              value: args.slot,
              className: classNames(sty.slotTargetSlot)
            })}
          </h4>
        </p.Stack>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  agregateCard: ["agregateCard", "h4"],
  h4: ["h4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  agregateCard: "div";
  h4: "h4";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAgregateCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAgregateCard__VariantsArgs;
    args?: PlasmicAgregateCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAgregateCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAgregateCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAgregateCard__ArgProps,
          internalVariantPropNames: PlasmicAgregateCard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAgregateCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "agregateCard") {
    func.displayName = "PlasmicAgregateCard";
  } else {
    func.displayName = `PlasmicAgregateCard.${nodeName}`;
  }
  return func;
}

export const PlasmicAgregateCard = Object.assign(
  // Top-level PlasmicAgregateCard renders the root element
  makeNodeComponent("agregateCard"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),

    // Metadata about props expected for PlasmicAgregateCard
    internalVariantProps: PlasmicAgregateCard__VariantProps,
    internalArgProps: PlasmicAgregateCard__ArgProps
  }
);

export default PlasmicAgregateCard;
/* prettier-ignore-end */
