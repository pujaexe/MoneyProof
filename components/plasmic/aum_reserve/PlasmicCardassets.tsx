// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4znbjXig9wF3fZoi7i7zbU
// Component: rnVmoefatt
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_aum_reserve.module.css"; // plasmic-import: 4znbjXig9wF3fZoi7i7zbU/projectcss
import sty from "./PlasmicCardassets.module.css"; // plasmic-import: rnVmoefatt/css

import WalleticonCirclesvgIcon from "./icons/PlasmicIcon__WalleticonCirclesvg"; // plasmic-import: B9jZG8PnJd/icon

export type PlasmicCardassets__VariantMembers = {};
export type PlasmicCardassets__VariantsArgs = {};
type VariantPropType = keyof PlasmicCardassets__VariantsArgs;
export const PlasmicCardassets__VariantProps = new Array<VariantPropType>();

export type PlasmicCardassets__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCardassets__ArgsType;
export const PlasmicCardassets__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3",
  "slot4"
);

export type PlasmicCardassets__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
  svg?: p.Flex<"svg">;
  title?: p.Flex<"div">;
};

export interface DefaultCardassetsProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicCardassets__RenderFunc(props: {
  variants: PlasmicCardassets__VariantsArgs;
  args: PlasmicCardassets__ArgsType;
  overrides: PlasmicCardassets__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
      component={Link}
      href={`/account-details`}
      platform={"nextjs"}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__l2Nm1)}>
          <WalleticonCirclesvgIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />

          {true ? (
            <div
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames(projectcss.all, sty.title)}
            >
              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  sty.h6__tiki3
                )}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "Account 1",
                  value: args.slot2,
                  className: classNames(sty.slotTargetSlot2)
                })}
              </h6>

              <div className={classNames(projectcss.all, sty.freeBox__vIyiq)}>
                {p.renderPlasmicSlot({
                  defaultContents: "Binance",
                  value: args.slot3,
                  className: classNames(sty.slotTargetSlot3)
                })}
              </div>
            </div>
          ) : null}
        </div>
      ) : null}

      <div className={classNames(projectcss.all, sty.freeBox__t4IRq)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__oH7Vv
          )}
        >
          {"Total Assets"}
        </div>

        <h6
          className={classNames(projectcss.all, projectcss.h6, sty.h6__tpAj6)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "$10.000",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </h6>
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__wvpWy)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ucwZj
          )}
        >
          {"Token Holding"}
        </div>

        <h6
          className={classNames(projectcss.all, projectcss.h6, sty.h6__iMmbu)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "5 Tokens",
            value: args.slot,
            className: classNames(sty.slotTargetSlot)
          })}
        </h6>
      </div>

      <div className={classNames(projectcss.all, sty.freeBox___9LvH)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__wuTw
          )}
        >
          {"PNL"}
        </div>

        <h6
          className={classNames(projectcss.all, projectcss.h6, sty.h6__kOgyU)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "$100 (5%)",
            value: args.slot4,
            className: classNames(sty.slotTargetSlot4)
          })}
        </h6>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "title"],
  svg: ["svg"],
  title: ["title"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "a";
  svg: "svg";
  title: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardassets__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardassets__VariantsArgs;
    args?: PlasmicCardassets__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCardassets__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCardassets__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCardassets__ArgProps,
          internalVariantPropNames: PlasmicCardassets__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCardassets__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardassets";
  } else {
    func.displayName = `PlasmicCardassets.${nodeName}`;
  }
  return func;
}

export const PlasmicCardassets = Object.assign(
  // Top-level PlasmicCardassets renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    title: makeNodeComponent("title"),

    // Metadata about props expected for PlasmicCardassets
    internalVariantProps: PlasmicCardassets__VariantProps,
    internalArgProps: PlasmicCardassets__ArgProps
  }
);

export default PlasmicCardassets;
/* prettier-ignore-end */
