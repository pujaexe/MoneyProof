// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4znbjXig9wF3fZoi7i7zbU
// Component: f6imSQsb8J
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent

import { useScreenVariants as useScreenVariantseRArzcqQfCpp } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: eR-ARZCQQfCpp/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_aum_reserve.module.css"; // plasmic-import: 4znbjXig9wF3fZoi7i7zbU/projectcss
import sty from "./PlasmicAccountDetails.module.css"; // plasmic-import: f6imSQsb8J/css

import VuesaxProfilsvgIcon from "./icons/PlasmicIcon__VuesaxProfilsvg"; // plasmic-import: 4oYJzIWe4E/icon
import VuesaxsvgIcon from "./icons/PlasmicIcon__Vuesaxsvg"; // plasmic-import: TysYCK0vNZ/icon
import VuesaxWalletsvgIcon from "./icons/PlasmicIcon__VuesaxWalletsvg"; // plasmic-import: bXFnY4C0B5/icon
import VuesaxbanksvgIcon from "./icons/PlasmicIcon__Vuesaxbanksvg"; // plasmic-import: 6X-29seKYp/icon
import BinanceIconLogowinesvgIcon from "./icons/PlasmicIcon__BinanceIconLogowinesvg"; // plasmic-import: NnHWJ_Ds8l/icon
import UsdSvgrepoComsvgIcon from "./icons/PlasmicIcon__UsdSvgrepoComsvg"; // plasmic-import: x95VK_t-Hc/icon
import WalletSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__WalletSvgrepoCom2Svg"; // plasmic-import: QK1xp80Oyc/icon

export type PlasmicAccountDetails__VariantMembers = {};
export type PlasmicAccountDetails__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccountDetails__VariantsArgs;
export const PlasmicAccountDetails__VariantProps = new Array<VariantPropType>();

export type PlasmicAccountDetails__ArgsType = {};
type ArgPropType = keyof PlasmicAccountDetails__ArgsType;
export const PlasmicAccountDetails__ArgProps = new Array<ArgPropType>();

export type PlasmicAccountDetails__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<"div">;
  navigationBar?: p.Flex<typeof NavigationBar>;
  content?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  table?: p.Flex<"div">;
  tHeader?: p.Flex<"div">;
  tContent?: p.Flex<"div">;
  docs?: p.Flex<"div">;
  tContent2?: p.Flex<"div">;
  docs2?: p.Flex<"div">;
  tContent3?: p.Flex<"div">;
  docs3?: p.Flex<"div">;
  table2?: p.Flex<"div">;
  tHeader2?: p.Flex<"div">;
  tContent4?: p.Flex<"div">;
  docs4?: p.Flex<"div">;
  table3?: p.Flex<"div">;
  tHeader3?: p.Flex<"div">;
  tContent5?: p.Flex<"div">;
  docs5?: p.Flex<"div">;
};

export interface DefaultAccountDetailsProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAccountDetails__RenderFunc(props: {
  variants: PlasmicAccountDetails__VariantsArgs;
  args: PlasmicAccountDetails__ArgsType;
  overrides: PlasmicAccountDetails__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseRArzcqQfCpp()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          {true ? (
            <div
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(projectcss.all, sty.header)}
            >
              <NavigationBar
                data-plasmic-name={"navigationBar"}
                data-plasmic-override={overrides.navigationBar}
                brand={
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__t2Hw5
                    )}
                    component={Link}
                    href={"#" as const}
                    platform={"nextjs"}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__ijAI)}
                      displayHeight={"24px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      src={{
                        src: "/plasmic/aum_reserve/images/auMsvg.svg",
                        fullWidth: 300,
                        fullHeight: 105,
                        aspectRatio: 2.846154
                      }}
                    />
                  </p.PlasmicLink>
                }
                className={classNames("__wab_instance", sty.navigationBar)}
                closeButton={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__b4Saq)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={"https://static1.plasmic.app/close.svg" as const}
                  />
                }
                itemsGap={8 as const}
                menuItems={
                  <VuesaxProfilsvgIcon
                    className={classNames(projectcss.all, sty.svg___2BpBj)}
                    role={"img"}
                  />
                }
                openButton={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__fxV3S)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={"https://static1.plasmic.app/menu.svg" as const}
                  />
                }
                responsiveBreakpoint={768 as const}
              />
            </div>
          ) : null}

          <div
            data-plasmic-name={"content"}
            data-plasmic-override={overrides.content}
            className={classNames(projectcss.all, sty.content)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__kHts2)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__eFcHj)}
                >
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___0Qpp5
                    )}
                    component={Link}
                    href={`/`}
                    platform={"nextjs"}
                  >
                    <VuesaxsvgIcon
                      className={classNames(projectcss.all, sty.svg__xfdvc)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4TOx
                      )}
                    >
                      {"Dashboard"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__tSmEn
                    )}
                    component={Link}
                    href={`/account-list`}
                    platform={"nextjs"}
                  >
                    <VuesaxWalletsvgIcon
                      className={classNames(projectcss.all, sty.svg__cyOtx)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__j5St3
                      )}
                    >
                      {"Account List"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__lmQdu
                    )}
                    component={Link}
                    href={`/bank-statement`}
                    platform={"nextjs"}
                  >
                    <VuesaxbanksvgIcon
                      className={classNames(projectcss.all, sty.svg___138E3)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__op6R
                      )}
                    >
                      {"Bank Report"}
                    </div>
                  </p.Stack>
                </p.Stack>
              </div>

              <div className={classNames(projectcss.all, sty.column__yd1Ip)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__eEzOr)}
                  >
                    <h6
                      className={classNames(
                        projectcss.all,
                        projectcss.h6,
                        projectcss.__wab_text,
                        sty.h6__w3N31
                      )}
                    >
                      {"Home / Account Details"}
                    </h6>
                  </div>
                ) : null}
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__bRe0)}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__xvCZl
                      )}
                    >
                      {"Account 1"}
                    </h4>

                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__foqPm
                        )}
                      >
                        <BinanceIconLogowinesvgIcon
                          className={classNames(projectcss.all, sty.svg__k2HKu)}
                          role={"img"}
                        />

                        <h6
                          className={classNames(
                            projectcss.all,
                            projectcss.h6,
                            projectcss.__wab_text,
                            sty.h6__v6MLe
                          )}
                        >
                          {"Binance"}
                        </h6>
                      </p.Stack>
                    ) : null}
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ieW68
                        )}
                      >
                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            sty.span__yNgiZ
                          )}
                        >
                          {"0x95df...239605"}
                        </span>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                ) : null}
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__xoqWp)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mFpFf
                        )}
                      >
                        <UsdSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__mKpjk)}
                          role={"img"}
                        />

                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__eJhB
                            )}
                          >
                            <span
                              className={classNames(
                                projectcss.all,
                                projectcss.span,
                                projectcss.__wab_text,
                                sty.span___3Pi1
                              )}
                            >
                              {"Total Balance"}
                            </span>

                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4__n6BW
                              )}
                            >
                              {"$260.076"}
                            </h4>
                          </p.Stack>
                        ) : null}
                      </p.Stack>
                    ) : null}
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__h72Nb
                        )}
                      >
                        <UsdSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__ecwXq)}
                          role={"img"}
                        />

                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__l6EzI
                            )}
                          >
                            <span
                              className={classNames(
                                projectcss.all,
                                projectcss.span,
                                projectcss.__wab_text,
                                sty.span__lJl9A
                              )}
                            >
                              {"Total P&L"}
                            </span>

                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4__sDmx
                              )}
                            >
                              {"+ $300"}
                            </h4>
                          </p.Stack>
                        ) : null}
                      </p.Stack>
                    ) : null}
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zu8Qc
                        )}
                      >
                        <WalletSvgrepoCom2SvgIcon
                          className={classNames(projectcss.all, sty.svg__pXNz)}
                          role={"img"}
                        />

                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__akW9E
                            )}
                          >
                            <span
                              className={classNames(
                                projectcss.all,
                                projectcss.span,
                                projectcss.__wab_text,
                                sty.span__yEval
                              )}
                            >
                              {"Tokens"}
                            </span>

                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4___0CvgS
                              )}
                            >
                              {"3"}
                            </h4>
                          </p.Stack>
                        ) : null}
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xu4T9)}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__oOgvo
                      )}
                    >
                      {"Asset Holdings"}
                    </h4>
                  </div>
                ) : null}
                {true ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"table"}
                    data-plasmic-override={overrides.table}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.table)}
                  >
                    <div
                      data-plasmic-name={"tHeader"}
                      data-plasmic-override={overrides.tHeader}
                      className={classNames(projectcss.all, sty.tHeader)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__d19D
                        )}
                      >
                        {"Asset"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fyDIy
                        )}
                      >
                        {"Balance"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cilp
                        )}
                      >
                        {"Price"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__irlf9
                        )}
                      >
                        {"Value"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"tContent"}
                      data-plasmic-override={overrides.tContent}
                      className={classNames(projectcss.all, sty.tContent)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"docs"}
                          data-plasmic-override={overrides.docs}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.docs)}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img___4Xki3)}
                            displayHeight={"auto" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"auto" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/aum_reserve/images/image.png",
                              fullWidth: 25,
                              fullHeight: 25,
                              aspectRatio: undefined
                            }}
                          />

                          <h6
                            className={classNames(
                              projectcss.all,
                              projectcss.h6,
                              projectcss.__wab_text,
                              sty.h6__kh6Yo
                            )}
                          >
                            {"Bitcoin"}
                          </h6>

                          <span
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              sty.span__i4KnX
                            )}
                          >
                            {"Btc"}
                          </span>
                        </p.Stack>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qVpmN
                        )}
                      >
                        {"10"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__u9Niq
                        )}
                      >
                        {"$24,669.91"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fXa7
                        )}
                      >
                        {"$246.690"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"tContent2"}
                      data-plasmic-override={overrides.tContent2}
                      className={classNames(projectcss.all, sty.tContent2)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"docs2"}
                          data-plasmic-override={overrides.docs2}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.docs2)}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__tgt2S)}
                            displayHeight={"auto" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"auto" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/aum_reserve/images/image2.png",
                              fullWidth: 25,
                              fullHeight: 25,
                              aspectRatio: undefined
                            }}
                          />

                          <h6
                            className={classNames(
                              projectcss.all,
                              projectcss.h6,
                              projectcss.__wab_text,
                              sty.h6__nMfsx
                            )}
                          >
                            {"Ethereum"}
                          </h6>

                          <span
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              sty.span__sz4Sn
                            )}
                          >
                            {"ETH"}
                          </span>
                        </p.Stack>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qimSa
                        )}
                      >
                        {"2"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__igq9
                        )}
                      >
                        {"$1,693.42"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__t9X9J
                        )}
                      >
                        {"$3.386"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"tContent3"}
                      data-plasmic-override={overrides.tContent3}
                      className={classNames(projectcss.all, sty.tContent3)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"docs3"}
                          data-plasmic-override={overrides.docs3}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.docs3)}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__bb28O)}
                            displayHeight={"auto" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"auto" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/aum_reserve/images/image3.png",
                              fullWidth: 25,
                              fullHeight: 25,
                              aspectRatio: undefined
                            }}
                          />

                          <h6
                            className={classNames(
                              projectcss.all,
                              projectcss.h6,
                              projectcss.__wab_text,
                              sty.h6__gIqBf
                            )}
                          >
                            {"Tether"}
                          </h6>

                          <span
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              sty.span__z6LXv
                            )}
                          >
                            {"USDT"}
                          </span>
                        </p.Stack>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__f6AvJ
                        )}
                      >
                        {"10.000"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__a5ElA
                        )}
                      >
                        {"$1"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yPkol
                        )}
                      >
                        {"$1"}
                      </div>
                    </div>
                  </p.Stack>
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xozPn)}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__c6RdO
                      )}
                    >
                      {"Spot Position"}
                    </h4>
                  </div>
                ) : null}
                {true ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"table2"}
                    data-plasmic-override={overrides.table2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.table2)}
                  >
                    <div
                      data-plasmic-name={"tHeader2"}
                      data-plasmic-override={overrides.tHeader2}
                      className={classNames(projectcss.all, sty.tHeader2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fAeAg
                        )}
                      >
                        {"Symbol"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tX5Ol
                        )}
                      >
                        {"Time"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uYLv4
                        )}
                      >
                        {"Price"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vxl3V
                        )}
                      >
                        {"QTY"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aXiun
                        )}
                      >
                        {"P & L"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"tContent4"}
                      data-plasmic-override={overrides.tContent4}
                      className={classNames(projectcss.all, sty.tContent4)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"docs4"}
                          data-plasmic-override={overrides.docs4}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.docs4)}
                        >
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__m0Ezl
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__xyyL4)}
                                displayHeight={"auto" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/aum_reserve/images/image.png",
                                  fullWidth: 25,
                                  fullHeight: 25,
                                  aspectRatio: undefined
                                }}
                              />

                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__mXz7O)}
                                displayHeight={"auto" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/aum_reserve/images/image3.png",
                                  fullWidth: 25,
                                  fullHeight: 25,
                                  aspectRatio: undefined
                                }}
                              />
                            </div>
                          ) : null}

                          <h6
                            className={classNames(
                              projectcss.all,
                              projectcss.h6,
                              projectcss.__wab_text,
                              sty.h6__hVb1E
                            )}
                          >
                            {"Bitcoin"}
                          </h6>

                          <span
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              sty.span__gr0M1
                            )}
                          >
                            {"Btc"}
                          </span>
                        </p.Stack>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k120T
                        )}
                      >
                        {"jan, 12 - 2023 12:00 UTC + 8"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yxdaa
                        )}
                      >
                        {"$24,669.91"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eOxN
                        )}
                      >
                        {"1"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__n5Wzo
                        )}
                      >
                        {"+3.4%"}
                      </div>
                    </div>
                  </p.Stack>
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__z8CHs)}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4___7Iotj
                      )}
                    >
                      {"Future Position"}
                    </h4>
                  </div>
                ) : null}
                {true ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"table3"}
                    data-plasmic-override={overrides.table3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.table3)}
                  >
                    <div
                      data-plasmic-name={"tHeader3"}
                      data-plasmic-override={overrides.tHeader3}
                      className={classNames(projectcss.all, sty.tHeader3)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__taJuI
                        )}
                      >
                        {"Symbol"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__j22Ou
                        )}
                      >
                        {"Time"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vVoaY
                        )}
                      >
                        {"Price"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__c91
                        )}
                      >
                        {"Amount"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fgxB0
                        )}
                      >
                        {"Leverage"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lm6Ag
                        )}
                      >
                        {"P & L"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"tContent5"}
                      data-plasmic-override={overrides.tContent5}
                      className={classNames(projectcss.all, sty.tContent5)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"docs5"}
                          data-plasmic-override={overrides.docs5}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.docs5)}
                        >
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__e7Gtp
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__cbtFx)}
                                displayHeight={"auto" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/aum_reserve/images/image.png",
                                  fullWidth: 25,
                                  fullHeight: 25,
                                  aspectRatio: undefined
                                }}
                              />

                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__wIrCo)}
                                displayHeight={"auto" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/aum_reserve/images/image3.png",
                                  fullWidth: 25,
                                  fullHeight: 25,
                                  aspectRatio: undefined
                                }}
                              />
                            </div>
                          ) : null}

                          <h6
                            className={classNames(
                              projectcss.all,
                              projectcss.h6,
                              projectcss.__wab_text,
                              sty.h6__tCEer
                            )}
                          >
                            {"Bitcoin"}
                          </h6>

                          <span
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              sty.span___9FCuy
                            )}
                          >
                            {"Btc"}
                          </span>
                        </p.Stack>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qocbZ
                        )}
                      >
                        {"jan, 12 - 2023 12:00 UTC + 8"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jbLre
                        )}
                      >
                        {"$24,669.91"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3PE4
                        )}
                      >
                        {"$1,000"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vXvX9
                        )}
                      >
                        {"10x"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__y5AH
                        )}
                      >
                        {"+3.4%"}
                      </div>
                    </div>
                  </p.Stack>
                ) : null}
              </div>
            </p.Stack>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "navigationBar",
    "content",
    "columns",
    "table",
    "tHeader",
    "tContent",
    "docs",
    "tContent2",
    "docs2",
    "tContent3",
    "docs3",
    "table2",
    "tHeader2",
    "tContent4",
    "docs4",
    "table3",
    "tHeader3",
    "tContent5",
    "docs5"
  ],
  header: ["header", "navigationBar"],
  navigationBar: ["navigationBar"],
  content: [
    "content",
    "columns",
    "table",
    "tHeader",
    "tContent",
    "docs",
    "tContent2",
    "docs2",
    "tContent3",
    "docs3",
    "table2",
    "tHeader2",
    "tContent4",
    "docs4",
    "table3",
    "tHeader3",
    "tContent5",
    "docs5"
  ],
  columns: [
    "columns",
    "table",
    "tHeader",
    "tContent",
    "docs",
    "tContent2",
    "docs2",
    "tContent3",
    "docs3",
    "table2",
    "tHeader2",
    "tContent4",
    "docs4",
    "table3",
    "tHeader3",
    "tContent5",
    "docs5"
  ],
  table: [
    "table",
    "tHeader",
    "tContent",
    "docs",
    "tContent2",
    "docs2",
    "tContent3",
    "docs3"
  ],
  tHeader: ["tHeader"],
  tContent: ["tContent", "docs"],
  docs: ["docs"],
  tContent2: ["tContent2", "docs2"],
  docs2: ["docs2"],
  tContent3: ["tContent3", "docs3"],
  docs3: ["docs3"],
  table2: ["table2", "tHeader2", "tContent4", "docs4"],
  tHeader2: ["tHeader2"],
  tContent4: ["tContent4", "docs4"],
  docs4: ["docs4"],
  table3: ["table3", "tHeader3", "tContent5", "docs5"],
  tHeader3: ["tHeader3"],
  tContent5: ["tContent5", "docs5"],
  docs5: ["docs5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  navigationBar: typeof NavigationBar;
  content: "div";
  columns: "div";
  table: "div";
  tHeader: "div";
  tContent: "div";
  docs: "div";
  tContent2: "div";
  docs2: "div";
  tContent3: "div";
  docs3: "div";
  table2: "div";
  tHeader2: "div";
  tContent4: "div";
  docs4: "div";
  table3: "div";
  tHeader3: "div";
  tContent5: "div";
  docs5: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccountDetails__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccountDetails__VariantsArgs;
    args?: PlasmicAccountDetails__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccountDetails__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAccountDetails__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAccountDetails__ArgProps,
          internalVariantPropNames: PlasmicAccountDetails__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAccountDetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccountDetails";
  } else {
    func.displayName = `PlasmicAccountDetails.${nodeName}`;
  }
  return func;
}

export const PlasmicAccountDetails = Object.assign(
  // Top-level PlasmicAccountDetails renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    navigationBar: makeNodeComponent("navigationBar"),
    content: makeNodeComponent("content"),
    columns: makeNodeComponent("columns"),
    table: makeNodeComponent("table"),
    tHeader: makeNodeComponent("tHeader"),
    tContent: makeNodeComponent("tContent"),
    docs: makeNodeComponent("docs"),
    tContent2: makeNodeComponent("tContent2"),
    docs2: makeNodeComponent("docs2"),
    tContent3: makeNodeComponent("tContent3"),
    docs3: makeNodeComponent("docs3"),
    table2: makeNodeComponent("table2"),
    tHeader2: makeNodeComponent("tHeader2"),
    tContent4: makeNodeComponent("tContent4"),
    docs4: makeNodeComponent("docs4"),
    table3: makeNodeComponent("table3"),
    tHeader3: makeNodeComponent("tHeader3"),
    tContent5: makeNodeComponent("tContent5"),
    docs5: makeNodeComponent("docs5"),

    // Metadata about props expected for PlasmicAccountDetails
    internalVariantProps: PlasmicAccountDetails__VariantProps,
    internalArgProps: PlasmicAccountDetails__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAccountDetails;
/* prettier-ignore-end */
