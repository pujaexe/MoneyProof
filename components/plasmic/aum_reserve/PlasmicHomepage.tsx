// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4znbjXig9wF3fZoi7i7zbU
// Component: c5usbYN74Zux
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import AgregateCard from "../../AgregateCard"; // plasmic-import: _XwAzx55qV/component
import Cardassets from "../../Cardassets"; // plasmic-import: rnVmoefatt/component

import { useScreenVariants as useScreenVariantseRArzcqQfCpp } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: eR-ARZCQQfCpp/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_aum_reserve.module.css"; // plasmic-import: 4znbjXig9wF3fZoi7i7zbU/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: c5usbYN74Zux/css

import VuesaxProfilsvgIcon from "./icons/PlasmicIcon__VuesaxProfilsvg"; // plasmic-import: 4oYJzIWe4E/icon
import VuesaxsvgIcon from "./icons/PlasmicIcon__Vuesaxsvg"; // plasmic-import: TysYCK0vNZ/icon
import VuesaxWalletsvgIcon from "./icons/PlasmicIcon__VuesaxWalletsvg"; // plasmic-import: bXFnY4C0B5/icon
import VuesaxbanksvgIcon from "./icons/PlasmicIcon__Vuesaxbanksvg"; // plasmic-import: 6X-29seKYp/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: BAj1wpRDeS/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: yup5Knqbfr/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: HTqRoNXr25/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: LvNE25NWkq/icon
import DotsvgIcon from "./icons/PlasmicIcon__Dotsvg"; // plasmic-import: CEYYwmARok/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<"div">;
  navigationBar?: p.Flex<typeof NavigationBar>;
  content?: p.Flex<"div">;
  agregate?: p.Flex<"div">;
  chart?: p.Flex<"div">;
  tokens?: p.Flex<"div">;
  tokens2?: p.Flex<"div">;
  tokens3?: p.Flex<"div">;
  tokens4?: p.Flex<"div">;
  tokens5?: p.Flex<"div">;
  tokens6?: p.Flex<"div">;
  tokens7?: p.Flex<"div">;
  tokens8?: p.Flex<"div">;
  tokens9?: p.Flex<"div">;
  tokens10?: p.Flex<"div">;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseRArzcqQfCpp()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          {true ? (
            <div
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(projectcss.all, sty.header)}
            >
              <NavigationBar
                data-plasmic-name={"navigationBar"}
                data-plasmic-override={overrides.navigationBar}
                brand={
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___3FDys
                    )}
                    component={Link}
                    href={"#" as const}
                    platform={"nextjs"}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__kIf3W)}
                      displayHeight={"24px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      src={{
                        src: "/plasmic/aum_reserve/images/auMsvg.svg",
                        fullWidth: 300,
                        fullHeight: 105,
                        aspectRatio: 2.846154
                      }}
                    />
                  </p.PlasmicLink>
                }
                className={classNames("__wab_instance", sty.navigationBar)}
                closeButton={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__srdk)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={"https://static1.plasmic.app/close.svg" as const}
                  />
                }
                itemsGap={8 as const}
                menuItems={
                  <VuesaxProfilsvgIcon
                    className={classNames(projectcss.all, sty.svg__k7Z6K)}
                    role={"img"}
                  />
                }
                openButton={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__xwszj)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={"https://static1.plasmic.app/menu.svg" as const}
                  />
                }
                responsiveBreakpoint={768 as const}
              />
            </div>
          ) : null}

          <div
            data-plasmic-name={"content"}
            data-plasmic-override={overrides.content}
            className={classNames(projectcss.all, sty.content)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__rWo5O)}
            >
              <div className={classNames(projectcss.all, sty.column___5NSPa)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__v9Jfg)}
                >
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__ygkbD
                    )}
                    component={Link}
                    href={`/`}
                    platform={"nextjs"}
                  >
                    <VuesaxsvgIcon
                      className={classNames(projectcss.all, sty.svg___0IGRb)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5D1H5
                      )}
                    >
                      {"Dashboard"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__qTspy
                    )}
                    component={Link}
                    href={`/account-list`}
                    platform={"nextjs"}
                  >
                    <VuesaxWalletsvgIcon
                      className={classNames(projectcss.all, sty.svg__rsGku)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0P4W1
                      )}
                    >
                      {"Account List"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__mdgt2
                    )}
                    component={Link}
                    href={`/bank-statement`}
                    platform={"nextjs"}
                  >
                    <VuesaxbanksvgIcon
                      className={classNames(projectcss.all, sty.svg__dplyn)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cnxxK
                      )}
                    >
                      {"Bank Report"}
                    </div>
                  </p.Stack>
                </p.Stack>
              </div>

              <div className={classNames(projectcss.all, sty.column___3VJXb)}>
                <div
                  data-plasmic-name={"agregate"}
                  data-plasmic-override={overrides.agregate}
                  className={classNames(projectcss.all, sty.agregate)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns___8BpGc)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__iMfQ)}
                    >
                      <AgregateCard
                        className={classNames(
                          "__wab_instance",
                          sty.agregateCard__ci0Hj
                        )}
                        slot={"$5.000.000"}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column___8FuY)}
                    >
                      <AgregateCard
                        className={classNames(
                          "__wab_instance",
                          sty.agregateCard__pOcu
                        )}
                        slot={"5"}
                        slot2={
                          <Icon2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__zBx2P
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"Account Totals"}
                      </AgregateCard>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column___7BWx9)}
                    >
                      <AgregateCard
                        className={classNames(
                          "__wab_instance",
                          sty.agregateCard__trKBj
                        )}
                        slot={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yufor
                            )}
                          >
                            {"10"}
                          </div>
                        }
                        slot2={
                          <Icon3Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__kRnut
                            )}
                            role={"img"}
                          />
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nhjA
                          )}
                        >
                          {"Tokens"}
                        </div>
                      </AgregateCard>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__utvxe)}
                    >
                      <AgregateCard
                        className={classNames(
                          "__wab_instance",
                          sty.agregateCard__faOvU
                        )}
                        slot={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8L9TS
                            )}
                          >
                            {"$2000"}
                          </div>
                        }
                        slot2={
                          <Icon4Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__yw90G
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"P & L"}
                      </AgregateCard>
                    </div>
                  </p.Stack>
                </div>

                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vQzS7)}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__q2EFn
                      )}
                    >
                      {"Token Holdings"}
                    </h4>
                  </div>
                ) : null}

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"chart"}
                  data-plasmic-override={overrides.chart}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.chart)}
                >
                  <div className={classNames(projectcss.all, sty.column__qFeD)}>
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ud3S
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__koFxd)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/aum_reserve/images/piechartpng.png",
                            fullWidth: 200,
                            fullHeight: 200,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    ) : null}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__omIah)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__nmTft)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kvoU3
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"tokens"}
                          data-plasmic-override={overrides.tokens}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.tokens)}
                        >
                          <DotsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___8OGcP
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ewOt8
                            )}
                          >
                            {"BTC"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zr0JF
                            )}
                          >
                            {"50%"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"tokens2"}
                          data-plasmic-override={overrides.tokens2}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.tokens2)}
                        >
                          <DotsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___0QmwU
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vtsr8
                            )}
                          >
                            {"ETH"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bpG7V
                            )}
                          >
                            {"50%"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"tokens3"}
                          data-plasmic-override={overrides.tokens3}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.tokens3)}
                        >
                          <DotsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bqyxH
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__raviM
                            )}
                          >
                            {"XLM"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rB6Qb
                            )}
                          >
                            {"50%"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"tokens4"}
                          data-plasmic-override={overrides.tokens4}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.tokens4)}
                        >
                          <DotsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__zFGx
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zxq0O
                            )}
                          >
                            {"XRP"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vkHsK
                            )}
                          >
                            {"50%"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"tokens5"}
                          data-plasmic-override={overrides.tokens5}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.tokens5)}
                        >
                          <DotsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__zbQUv
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gCa1R
                            )}
                          >
                            {"XMR"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eImPo
                            )}
                          >
                            {"50%"}
                          </div>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__y7DP
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"tokens6"}
                          data-plasmic-override={overrides.tokens6}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.tokens6)}
                        >
                          <DotsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__o8Yn0
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__il1ZT
                            )}
                          >
                            {"BTT"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ulOWh
                            )}
                          >
                            {"50%"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"tokens7"}
                          data-plasmic-override={overrides.tokens7}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.tokens7)}
                        >
                          <DotsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__t8HIj
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hjbHi
                            )}
                          >
                            {"DOGE"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9JvbV
                            )}
                          >
                            {"50%"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"tokens8"}
                          data-plasmic-override={overrides.tokens8}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.tokens8)}
                        >
                          <DotsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__x0AXy
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oJdTo
                            )}
                          >
                            {"ZIL"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ri1Ea
                            )}
                          >
                            {"50%"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"tokens9"}
                          data-plasmic-override={overrides.tokens9}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.tokens9)}
                        >
                          <DotsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__sj9Xc
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__h0Ofr
                            )}
                          >
                            {"HBAR"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rjuQn
                            )}
                          >
                            {"50%"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"tokens10"}
                          data-plasmic-override={overrides.tokens10}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.tokens10)}
                        >
                          <DotsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__sffRv
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gom7E
                            )}
                          >
                            {"ALGO"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__a871O
                            )}
                          >
                            {"50%"}
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </div>
                </p.Stack>

                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__moX7A)}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4___3PUtj
                      )}
                    >
                      {"Account List"}
                    </h4>
                  </div>
                ) : null}

                <div
                  className={classNames(projectcss.all, sty.freeBox___1N9UF)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xp2Yw)}
                  >
                    <Cardassets
                      className={classNames(
                        "__wab_instance",
                        sty.cardassets__bwir6
                      )}
                      slot4={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__p360B
                          )}
                        >
                          {"$100 (5%)"}
                        </div>
                      }
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__ssEdP)}
                  >
                    <Cardassets
                      className={classNames(
                        "__wab_instance",
                        sty.cardassets__tcz8C
                      )}
                      slot2={"Account 2"}
                      slot4={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__f4FlJ
                          )}
                        >
                          {"$100 (5%)"}
                        </div>
                      }
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__z5AMf)}
                  >
                    <Cardassets
                      className={classNames(
                        "__wab_instance",
                        sty.cardassets__n9LHf
                      )}
                      slot2={"Account 3"}
                      slot4={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4LAfq
                          )}
                        >
                          {"$100 (5%)"}
                        </div>
                      }
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__cKeJh)}
                  >
                    <Cardassets
                      className={classNames(
                        "__wab_instance",
                        sty.cardassets__pvOub
                      )}
                      slot2={"Account 4"}
                      slot4={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gxj1K
                          )}
                        >
                          {"-$10 (1%)"}
                        </div>
                      }
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__u2Yvg)}
                  >
                    <Cardassets
                      className={classNames(
                        "__wab_instance",
                        sty.cardassets__qnIzk
                      )}
                      slot2={"Account 5"}
                      slot4={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xOqqe
                          )}
                        >
                          {"$100 (5%)"}
                        </div>
                      }
                    />
                  </div>
                </div>
              </div>
            </p.Stack>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "navigationBar",
    "content",
    "agregate",
    "chart",
    "tokens",
    "tokens2",
    "tokens3",
    "tokens4",
    "tokens5",
    "tokens6",
    "tokens7",
    "tokens8",
    "tokens9",
    "tokens10"
  ],
  header: ["header", "navigationBar"],
  navigationBar: ["navigationBar"],
  content: [
    "content",
    "agregate",
    "chart",
    "tokens",
    "tokens2",
    "tokens3",
    "tokens4",
    "tokens5",
    "tokens6",
    "tokens7",
    "tokens8",
    "tokens9",
    "tokens10"
  ],
  agregate: ["agregate"],
  chart: [
    "chart",
    "tokens",
    "tokens2",
    "tokens3",
    "tokens4",
    "tokens5",
    "tokens6",
    "tokens7",
    "tokens8",
    "tokens9",
    "tokens10"
  ],
  tokens: ["tokens"],
  tokens2: ["tokens2"],
  tokens3: ["tokens3"],
  tokens4: ["tokens4"],
  tokens5: ["tokens5"],
  tokens6: ["tokens6"],
  tokens7: ["tokens7"],
  tokens8: ["tokens8"],
  tokens9: ["tokens9"],
  tokens10: ["tokens10"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  navigationBar: typeof NavigationBar;
  content: "div";
  agregate: "div";
  chart: "div";
  tokens: "div";
  tokens2: "div";
  tokens3: "div";
  tokens4: "div";
  tokens5: "div";
  tokens6: "div";
  tokens7: "div";
  tokens8: "div";
  tokens9: "div";
  tokens10: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    navigationBar: makeNodeComponent("navigationBar"),
    content: makeNodeComponent("content"),
    agregate: makeNodeComponent("agregate"),
    chart: makeNodeComponent("chart"),
    tokens: makeNodeComponent("tokens"),
    tokens2: makeNodeComponent("tokens2"),
    tokens3: makeNodeComponent("tokens3"),
    tokens4: makeNodeComponent("tokens4"),
    tokens5: makeNodeComponent("tokens5"),
    tokens6: makeNodeComponent("tokens6"),
    tokens7: makeNodeComponent("tokens7"),
    tokens8: makeNodeComponent("tokens8"),
    tokens9: makeNodeComponent("tokens9"),
    tokens10: makeNodeComponent("tokens10"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Proof of AUM",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
