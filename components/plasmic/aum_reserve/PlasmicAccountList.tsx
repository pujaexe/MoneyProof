// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4znbjXig9wF3fZoi7i7zbU
// Component: pBZvgkMhvh
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import Cardassets from "../../Cardassets"; // plasmic-import: rnVmoefatt/component

import { useScreenVariants as useScreenVariantseRArzcqQfCpp } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: eR-ARZCQQfCpp/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_aum_reserve.module.css"; // plasmic-import: 4znbjXig9wF3fZoi7i7zbU/projectcss
import sty from "./PlasmicAccountList.module.css"; // plasmic-import: pBZvgkMhvh/css

import VuesaxProfilsvgIcon from "./icons/PlasmicIcon__VuesaxProfilsvg"; // plasmic-import: 4oYJzIWe4E/icon
import VuesaxsvgIcon from "./icons/PlasmicIcon__Vuesaxsvg"; // plasmic-import: TysYCK0vNZ/icon
import VuesaxWalletsvgIcon from "./icons/PlasmicIcon__VuesaxWalletsvg"; // plasmic-import: bXFnY4C0B5/icon
import VuesaxbanksvgIcon from "./icons/PlasmicIcon__Vuesaxbanksvg"; // plasmic-import: 6X-29seKYp/icon

export type PlasmicAccountList__VariantMembers = {};
export type PlasmicAccountList__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccountList__VariantsArgs;
export const PlasmicAccountList__VariantProps = new Array<VariantPropType>();

export type PlasmicAccountList__ArgsType = {};
type ArgPropType = keyof PlasmicAccountList__ArgsType;
export const PlasmicAccountList__ArgProps = new Array<ArgPropType>();

export type PlasmicAccountList__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<"div">;
  navigationBar?: p.Flex<typeof NavigationBar>;
  img?: p.Flex<typeof p.PlasmicImg>;
  content?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  h4?: p.Flex<"h4">;
};

export interface DefaultAccountListProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAccountList__RenderFunc(props: {
  variants: PlasmicAccountList__VariantsArgs;
  args: PlasmicAccountList__ArgsType;
  overrides: PlasmicAccountList__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseRArzcqQfCpp()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          {true ? (
            <div
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(projectcss.all, sty.header)}
            >
              <NavigationBar
                data-plasmic-name={"navigationBar"}
                data-plasmic-override={overrides.navigationBar}
                brand={
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___9PQC
                    )}
                    component={Link}
                    href={"#" as const}
                    platform={"nextjs"}
                  >
                    <p.PlasmicImg
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"24px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      src={{
                        src: "/plasmic/aum_reserve/images/vaultpilotpng.png",
                        fullWidth: 432,
                        fullHeight: 73,
                        aspectRatio: undefined
                      }}
                    />
                  </p.PlasmicLink>
                }
                className={classNames("__wab_instance", sty.navigationBar)}
                closeButton={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__cqKLa)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={"https://static1.plasmic.app/close.svg" as const}
                  />
                }
                itemsGap={8 as const}
                menuItems={
                  <VuesaxProfilsvgIcon
                    className={classNames(projectcss.all, sty.svg__c3Ac5)}
                    role={"img"}
                  />
                }
                openButton={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__atof8)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={"https://static1.plasmic.app/menu.svg" as const}
                  />
                }
                responsiveBreakpoint={768 as const}
              />
            </div>
          ) : null}

          <div
            data-plasmic-name={"content"}
            data-plasmic-override={overrides.content}
            className={classNames(projectcss.all, sty.content)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__e7Qg1)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__flYd3)}
                >
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__nCwvm
                    )}
                    component={Link}
                    href={`/`}
                    platform={"nextjs"}
                  >
                    <VuesaxsvgIcon
                      className={classNames(projectcss.all, sty.svg__olnet)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qWltQ
                      )}
                    >
                      {"Dashboard"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___559I
                    )}
                    component={Link}
                    href={`/account-list`}
                    platform={"nextjs"}
                  >
                    <VuesaxWalletsvgIcon
                      className={classNames(projectcss.all, sty.svg__fmHhm)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4RnAy
                      )}
                    >
                      {"Account List"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__mwa9
                    )}
                    component={Link}
                    href={`/bank-statement`}
                    platform={"nextjs"}
                  >
                    <VuesaxbanksvgIcon
                      className={classNames(projectcss.all, sty.svg__toZDr)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0SmBu
                      )}
                    >
                      {"Bank Report"}
                    </div>
                  </p.Stack>
                </p.Stack>
              </div>

              <div className={classNames(projectcss.all, sty.column__t7UHk)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bwYMm)}
                  >
                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      {"Account List"}
                    </h4>
                  </div>
                ) : null}

                <div className={classNames(projectcss.all, sty.freeBox__h04Qy)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__eHqz0)}
                  >
                    <Cardassets
                      className={classNames(
                        "__wab_instance",
                        sty.cardassets__imJcL
                      )}
                      slot4={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__b3B4F
                          )}
                        >
                          {"$100 (5%)"}
                        </div>
                      }
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox___0AxSz)}
                  >
                    <Cardassets
                      className={classNames(
                        "__wab_instance",
                        sty.cardassets__jGHtX
                      )}
                      slot2={"Account 2"}
                      slot4={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rqP6Q
                          )}
                        >
                          {"$100 (5%)"}
                        </div>
                      }
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__pztp3)}
                  >
                    <Cardassets
                      className={classNames(
                        "__wab_instance",
                        sty.cardassets___6VZTn
                      )}
                      slot2={"Account 3"}
                      slot4={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bv5Cx
                          )}
                        >
                          {"$100 (5%)"}
                        </div>
                      }
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__hrSc0)}
                  >
                    <Cardassets
                      className={classNames(
                        "__wab_instance",
                        sty.cardassets__unmZi
                      )}
                      slot2={"Account 4"}
                      slot4={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__s9ZOi
                          )}
                        >
                          {"-$10 (1%)"}
                        </div>
                      }
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__qOxDe)}
                  >
                    <Cardassets
                      className={classNames(
                        "__wab_instance",
                        sty.cardassets__dnOaZ
                      )}
                      slot2={"Account 5"}
                      slot4={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xQhpF
                          )}
                        >
                          {"$100 (5%)"}
                        </div>
                      }
                    />
                  </div>
                </div>
              </div>
            </p.Stack>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "navigationBar", "img", "content", "columns", "h4"],
  header: ["header", "navigationBar", "img"],
  navigationBar: ["navigationBar", "img"],
  img: ["img"],
  content: ["content", "columns", "h4"],
  columns: ["columns", "h4"],
  h4: ["h4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  navigationBar: typeof NavigationBar;
  img: typeof p.PlasmicImg;
  content: "div";
  columns: "div";
  h4: "h4";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccountList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccountList__VariantsArgs;
    args?: PlasmicAccountList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccountList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAccountList__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAccountList__ArgProps,
          internalVariantPropNames: PlasmicAccountList__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAccountList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccountList";
  } else {
    func.displayName = `PlasmicAccountList.${nodeName}`;
  }
  return func;
}

export const PlasmicAccountList = Object.assign(
  // Top-level PlasmicAccountList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    navigationBar: makeNodeComponent("navigationBar"),
    img: makeNodeComponent("img"),
    content: makeNodeComponent("content"),
    columns: makeNodeComponent("columns"),
    h4: makeNodeComponent("h4"),

    // Metadata about props expected for PlasmicAccountList
    internalVariantProps: PlasmicAccountList__VariantProps,
    internalArgProps: PlasmicAccountList__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAccountList;
/* prettier-ignore-end */
